---

---

<div class="game-wrapper">
  <h1>Mushroom Runner</h1>
  <div class="instructions">
    <p>
      Help the mushroom jump over obstacles! Press SPACE or tap to jump, hold
      for a higher jump.
    </p>
  </div>

  <div id="game-container">
    <canvas id="game-canvas" width="800" height="300"></canvas>
    <div id="score-display">Score: 0</div>

    <div id="start-screen">
      <h2>Mushroom Runner</h2>
      <p>Press SPACE or click to start and jump</p>
      <button id="start-button">Start Game</button>
    </div>

    <div id="game-over">
      <h2>Game Over!</h2>
      <p>Your score: <span id="final-score">0</span></p>
      <button id="restart-button">Play Again</button>
    </div>
  </div>
</div>

<style>
  .game-wrapper {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    color: #2e4033;
  }

  #game-container {
    position: relative;
    width: 800px;
    height: 300px;
    border: 3px solid #5a7d60;
    border-radius: 10px;
    overflow: hidden;
    background: linear-gradient(to bottom, #c9e6ff 0%, #e9f5ff 100%);
    max-width: 100%;
  }

  #game-canvas {
    display: block;
    max-width: 100%;
  }

  #score-display {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 20px;
    font-weight: bold;
    color: #2e4033;
  }

  #start-screen {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.8);
  }

  #game-over {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.8);
  }

  button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #5a7d60;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
  }

  button:hover {
    background-color: #4a6b50;
  }

  h1,
  h2 {
    margin: 10px 0;
  }

  .instructions {
    text-align: center;
    max-width: 600px;
    margin: 20px 0;
  }

  /* Responsive adjustments */
  @media (max-width: 850px) {
    #game-container {
      width: 100%;
      height: auto;
      aspect-ratio: 8/3;
    }

    #game-canvas {
      width: 100%;
      height: auto;
    }
  }
</style>

<script>
  // This script will run client-side in Astro
  // We need to use the client:load directive when adding this component to a page

  // Game constants and variables
  const GAME_WIDTH = 800;
  const GAME_HEIGHT = 300;
  const GROUND_HEIGHT = 50;
  const GRAVITY = 0.6;
  const JUMP_FORCE = -10;
  const MAX_JUMP_HOLD = 20;

  // Game state
  let isGameRunning = false;
  let score = 0;
  let jumpHoldTime = 0;
  let isJumping = false;
  let isJumpHolding = false;

  // Get canvas and context
  const canvas = document.getElementById("game-canvas");
  const ctx = canvas.getContext("2d");

  // Game objects
  const player = {
    x: 80,
    y: GAME_HEIGHT - GROUND_HEIGHT - 30, // Initial position on ground
    width: 30,
    height: 30,
    velocityY: 0,
    isOnGround: true,

    update() {
      // Apply gravity
      this.velocityY += GRAVITY;

      // Update position
      this.y += this.velocityY;

      // Check if on ground
      if (this.y > GAME_HEIGHT - GROUND_HEIGHT - this.height) {
        this.y = GAME_HEIGHT - GROUND_HEIGHT - this.height;
        this.velocityY = 0;
        this.isOnGround = true;
        isJumping = false;
      } else {
        this.isOnGround = false;
      }

      // Handle jump hold mechanic
      if (isJumpHolding && isJumping && jumpHoldTime < MAX_JUMP_HOLD) {
        this.velocityY += JUMP_FORCE * 0.05;
        jumpHoldTime++;
      }
    },

    draw() {
      // Draw the mushroom character
      ctx.fillStyle = "#E57373"; // Cap color
      ctx.beginPath();
      ctx.arc(
        this.x + this.width / 2,
        this.y + this.height / 3,
        this.width / 2,
        0,
        Math.PI * 2
      );
      ctx.fill();

      // Stem
      ctx.fillStyle = "#FFFFFF";
      ctx.fillRect(
        this.x + this.width / 3,
        this.y + this.height / 3,
        this.width / 3,
        (this.height * 2) / 3
      );

      // Add dots to the mushroom cap
      ctx.fillStyle = "#FFFFFF";
      const dotPositions = [
        [this.x + this.width / 4, this.y + this.height / 6],
        [this.x + (this.width * 3) / 4, this.y + this.height / 5],
        [this.x + this.width / 2, this.y + this.height / 8],
      ];

      dotPositions.forEach((pos) => {
        ctx.beginPath();
        ctx.arc(pos[0], pos[1], 3, 0, Math.PI * 2);
        ctx.fill();
      });

      // Eyes
      ctx.fillStyle = "#000000";
      ctx.beginPath();
      ctx.arc(
        this.x + this.width * 0.4,
        this.y + this.height * 0.4,
        2,
        0,
        Math.PI * 2
      );
      ctx.fill();
      ctx.beginPath();
      ctx.arc(
        this.x + this.width * 0.6,
        this.y + this.height * 0.4,
        2,
        0,
        Math.PI * 2
      );
      ctx.fill();

      // Smile
      ctx.beginPath();
      ctx.arc(this.x + this.width / 2, this.y + this.height / 2, 5, 0, Math.PI);
      ctx.stroke();
    },

    jump() {
      if (this.isOnGround) {
        this.velocityY = JUMP_FORCE;
        this.isOnGround = false;
        isJumping = true;
        jumpHoldTime = 0;
      }
    },
  };

  // Obstacles array to store active obstacles
  let obstacles = [];
  let obstacleSpeed = 5;
  let obstacleTimer = 0;

  function createObstacle() {
    // Different obstacle types
    const types = [
      { width: 20, height: 40, color: "#8B4513", shape: "rect" }, // log
      { width: 40, height: 20, color: "#A5D6A7", shape: "mushroom" }, // small mushroom
      { width: 30, height: 30, color: "#78909C", shape: "rock" }, // rock
    ];

    const type = types[Math.floor(Math.random() * types.length)];

    return {
      x: GAME_WIDTH,
      y: GAME_HEIGHT - GROUND_HEIGHT - type.height,
      width: type.width,
      height: type.height,
      color: type.color,
      shape: type.shape,

      update() {
        this.x -= obstacleSpeed;
      },

      draw() {
        if (this.shape === "rect") {
          // Log obstacle
          ctx.fillStyle = this.color;
          ctx.fillRect(this.x, this.y, this.width, this.height);

          // Add wood texture lines
          ctx.strokeStyle = "#6D4C41";
          ctx.lineWidth = 1;
          for (let i = 0; i < 3; i++) {
            ctx.beginPath();
            ctx.moveTo(this.x, this.y + (i + 1) * (this.height / 4));
            ctx.lineTo(
              this.x + this.width,
              this.y + (i + 1) * (this.height / 4)
            );
            ctx.stroke();
          }
        } else if (this.shape === "mushroom") {
          // Enemy mushroom
          // Cap
          ctx.fillStyle = "#81C784";
          ctx.beginPath();
          ctx.arc(
            this.x + this.width / 2,
            this.y + this.height / 3,
            this.width / 2,
            0,
            Math.PI * 2
          );
          ctx.fill();

          // Stem
          ctx.fillStyle = "#E0E0E0";
          ctx.fillRect(
            this.x + this.width / 3,
            this.y + this.height / 3,
            this.width / 3,
            (this.height * 2) / 3
          );

          // Angry eyes
          ctx.fillStyle = "#000000";
          ctx.beginPath();
          ctx.arc(
            this.x + this.width * 0.35,
            this.y + this.height * 0.3,
            2,
            0,
            Math.PI * 2
          );
          ctx.fill();
          ctx.beginPath();
          ctx.arc(
            this.x + this.width * 0.65,
            this.y + this.height * 0.3,
            2,
            0,
            Math.PI * 2
          );
          ctx.fill();

          // Frown
          ctx.beginPath();
          ctx.arc(
            this.x + this.width / 2,
            this.y + this.height * 0.6,
            5,
            Math.PI,
            Math.PI * 2
          );
          ctx.stroke();
        } else if (this.shape === "rock") {
          // Rock obstacle
          ctx.fillStyle = this.color;
          ctx.beginPath();
          ctx.moveTo(this.x, this.y + this.height);
          ctx.lineTo(this.x, this.y + this.height * 0.7);
          ctx.lineTo(this.x + this.width * 0.3, this.y + this.height * 0.4);
          ctx.lineTo(this.x + this.width * 0.7, this.y + this.height * 0.2);
          ctx.lineTo(this.x + this.width, this.y + this.height * 0.5);
          ctx.lineTo(this.x + this.width, this.y + this.height);
          ctx.closePath();
          ctx.fill();

          // Rock details
          ctx.strokeStyle = "#616161";
          ctx.lineWidth = 1;
          ctx.beginPath();
          ctx.moveTo(this.x + this.width * 0.2, this.y + this.height * 0.6);
          ctx.lineTo(this.x + this.width * 0.4, this.y + this.height * 0.5);
          ctx.stroke();

          ctx.beginPath();
          ctx.moveTo(this.x + this.width * 0.6, this.y + this.height * 0.4);
          ctx.lineTo(this.x + this.width * 0.8, this.y + this.height * 0.6);
          ctx.stroke();
        }
      },

      isCollidingWith(other) {
        return !(
          this.x + this.width < other.x ||
          this.x > other.x + other.width ||
          this.y + this.height < other.y ||
          this.y > other.y + other.height
        );
      },
    };
  }

  // Draw the ground
  function drawGround() {
    // Main ground
    ctx.fillStyle = "#8D6E63";
    ctx.fillRect(0, GAME_HEIGHT - GROUND_HEIGHT, GAME_WIDTH, GROUND_HEIGHT);

    // Grass top layer
    ctx.fillStyle = "#81C784";
    ctx.fillRect(0, GAME_HEIGHT - GROUND_HEIGHT, GAME_WIDTH, 5);

    // Underground details
    ctx.fillStyle = "#5D4037";
    for (let i = 0; i < GAME_WIDTH; i += 40) {
      ctx.fillRect(i, GAME_HEIGHT - GROUND_HEIGHT + 15, 30, 5);
      ctx.fillRect(i + 15, GAME_HEIGHT - GROUND_HEIGHT + 30, 20, 4);
    }
  }

  // Draw background with parallax effect
  let bgPosition = 0;

  function drawBackground() {
    // Sky gradient already applied in CSS

    // Draw distant hills
    ctx.fillStyle = "#A5D6A7";

    // First hill layer (slower moving)
    const hillPositions1 = [100, 300, 500, 700];
    hillPositions1.forEach((x) => {
      const adjustedX = ((x + bgPosition * 0.2) % (GAME_WIDTH + 200)) - 100;
      ctx.beginPath();
      ctx.arc(adjustedX, GAME_HEIGHT - GROUND_HEIGHT, 80, Math.PI, 0);
      ctx.fill();
    });

    // Second hill layer (faster moving)
    ctx.fillStyle = "#81C784";
    const hillPositions2 = [0, 200, 400, 600];
    hillPositions2.forEach((x) => {
      const adjustedX = ((x + bgPosition * 0.4) % (GAME_WIDTH + 200)) - 100;
      ctx.beginPath();
      ctx.arc(adjustedX, GAME_HEIGHT - GROUND_HEIGHT, 60, Math.PI, 0);
      ctx.fill();
    });

    // Draw clouds
    ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
    const cloudPositions = [50, 250, 450, 650];
    cloudPositions.forEach((x, i) => {
      const adjustedX = ((x + bgPosition * 0.1) % (GAME_WIDTH + 200)) - 100;
      const y = 60 + (i % 3) * 30;

      // Draw cloud puffs
      ctx.beginPath();
      ctx.arc(adjustedX, y, 20, 0, Math.PI * 2);
      ctx.arc(adjustedX + 15, y - 10, 15, 0, Math.PI * 2);
      ctx.arc(adjustedX + 25, y + 5, 18, 0, Math.PI * 2);
      ctx.arc(adjustedX - 15, y + 5, 15, 0, Math.PI * 2);
      ctx.fill();
    });

    // Update background position
    bgPosition = (bgPosition + obstacleSpeed * 0.5) % 1000;
  }

  // Game loop functions
  function update() {
    if (!isGameRunning) return;

    // Update player
    player.update();

    // Update obstacles
    obstacles.forEach((obstacle) => obstacle.update());

    // Remove obstacles that have gone off screen
    obstacles = obstacles.filter((obstacle) => obstacle.x > -obstacle.width);

    // Create new obstacles
    obstacleTimer++;
    if (obstacleTimer > 100) {
      // Random interval between obstacles
      if (Math.random() < 0.3) {
        obstacles.push(createObstacle());
        obstacleTimer = 0;
      }
    }

    // Check for collisions
    obstacles.forEach((obstacle) => {
      if (obstacle.isCollidingWith(player)) {
        gameOver();
      }
    });

    // Update score
    score += 0.1;
    document.getElementById("score-display").innerText =
      "Score: " + Math.floor(score);

    // Increase difficulty over time
    if (Math.floor(score) % 100 === 0 && Math.floor(score) > 0) {
      obstacleSpeed += 0.1;
    }
  }

  function draw() {
    // Clear canvas
    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);

    // Draw background
    drawBackground();

    // Draw ground
    drawGround();

    // Draw player
    player.draw();

    // Draw obstacles
    obstacles.forEach((obstacle) => obstacle.draw());
  }

  function gameLoop() {
    update();
    draw();
    requestAnimationFrame(gameLoop);
  }

  // Game control functions
  function startGame() {
    isGameRunning = true;
    score = 0;
    obstacles = [];
    obstacleSpeed = 5;
    player.y = GAME_HEIGHT - GROUND_HEIGHT - player.height;
    player.velocityY = 0;

    document.getElementById("start-screen").style.display = "none";
    document.getElementById("game-over").style.display = "none";

    // Start the game loop
    gameLoop();
  }

  function gameOver() {
    isGameRunning = false;
    document.getElementById("final-score").innerText = Math.floor(score);
    document.getElementById("game-over").style.display = "flex";
  }

  // Initialize the game once DOM is fully loaded
  document.addEventListener("DOMContentLoaded", () => {
    // Add event listeners
    document
      .getElementById("start-button")
      .addEventListener("click", startGame);
    document
      .getElementById("restart-button")
      .addEventListener("click", startGame);

    // Handle keyboard input
    document.addEventListener("keydown", (e) => {
      if (e.code === "Space") {
        e.preventDefault(); // Prevent page scrolling

        if (!isGameRunning) {
          startGame();
          return;
        }

        player.jump();
        isJumpHolding = true;
      }
    });

    document.addEventListener("keyup", (e) => {
      if (e.code === "Space") {
        isJumpHolding = false;
      }
    });

    // Handle touch/mouse input
    canvas.addEventListener("mousedown", (e) => {
      e.preventDefault();

      if (!isGameRunning) {
        startGame();
        return;
      }

      player.jump();
      isJumpHolding = true;
    });

    canvas.addEventListener("mouseup", () => {
      isJumpHolding = false;
    });

    canvas.addEventListener("touchstart", (e) => {
      e.preventDefault();

      if (!isGameRunning) {
        startGame();
        return;
      }

      player.jump();
      isJumpHolding = true;
    });

    canvas.addEventListener("touchend", () => {
      isJumpHolding = false;
    });

    // Draw initial state
    draw();
  });
</script>
